STACK AND HEAP

STACK
The stack is the memory set aside as scratch space for a thread of execution. When a function is called, a block is reserved on the top of the stack for local variables and some bookkeeping data. When that function returns, the block becomes unused and can be used the next time a function is called. The stack is always reserved in a LIFO (last in first out) order; the most recently reserved block is always the next block to be freed. This makes it really simple to keep track of the stack; freeing a block from the stack is nothing more than adjusting one pointer.

A stack is a special area of computer's memory which stores temporary variables created by a function. In stack, variables are declared, stored and initialized during runtime.
It is a temporary storage memory. When the computing task is complete, the memory of the variable will be automatically erased. The stack section mostly contains methods, local variable, and reference variables.

HEAP
The heap is memory set aside for dynamic allocation. Unlike the stack, there's no enforced pattern to the allocation and deallocation of blocks from the heap; you can allocate a block at any time and free it at any time. This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time; there are many custom heap allocators available to tune heap performance for different usage patterns.
The heap is a memory used by programming languages to store global variables. By default, all global variable are stored in heap memory space. It supports Dynamic memory allocation.

KEY DIFFERENCES BETWEEN STACK AND HEAP
Stack is a linear data structure whereas Heap is a hierarchical data structure.
Stack memory will never become fragmented whereas Heap memory can become fragmented as blocks of memory are first allocated and then freed.
Stack accesses local variables only while Heap allows you to access variables globally.
Stack variables can’t be resized whereas Heap variables can be resized.
Stack memory is allocated in a contiguous block whereas Heap memory is allocated in any random order.
Stack doesn’t require to de-allocate variables whereas in Heap de-allocation is needed.
Stack allocation and deallocation are done by compiler instructions whereas Heap allocation and deallocation is done by the programmer.

if you use the STACK portion of memory you don't have to use free(), if you use the HEAP portion, which will happen when using malloc(), you need to free that memory using free()

functions use the HEAP portion

Disadvantages of using Stack
Cons/Drawbacks of using Stack memory are:

Stack memory is very limited.
Creating too many objects on the stack can increase the risk of stack overflow.
Random access is not possible.
Variable storage will be overwritten, which sometimes leads to undefined behavior of the function or program.
The stack will fall outside of the memory area, which might lead to an abnormal termination.
Disadvantages of using Heap
Cons/drawbacks of using Heaps memory are:

It can provide the maximum memory an OS can provide
It takes more time to compute.
Memory management is more complicated in heap memory as it is used globally.
It takes too much time in execution compared to the stack.

HEAP OVERFLOW
A heap overflow is a form of buffer overflow; it happens when a chunk of memory is allocated to the heap and data is written to this memory without any bound checking being done on the data

STACK-BASED OVERFLOW
In software, a stack overflow occurs if the call stack pointer exceeds the stack bound. Like infinite function recursion.

CALL STACK
a call stack is a stack data structure that stores information about the active subroutines of a computer program. This kind of stack is also known as an execution stack, program stack, control stack, run-time stack, or machine stack, and is often shortened to just "the stack".

INSTRUCTION SET ARCHITECTURE
an instruction set architecture (ISA) is an abstract model of a computer. It is also referred to as architecture or computer architecture. A realization of an ISA, such as a central processing unit (CPU), is called an implementation.

SUBROUTINE
a subroutine is a sequence of program instructions that performs a specific task, packaged as a unit. This unit can then be used in programs wherever that particular task should be performed.

COMPUTER PROGRAM
A computer program is a collection of instructions that can be executed by a computer to perform a specific task.

DATA STRUCTURE
In computer science, a data structure is a data organization, management, and storage format that enables efficient access and modification.[1][2][3] More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.

MEMORY MANAGEMENT
Memory management is a form of resource management applied to computer memory. The essential requirement of memory management is to provide ways to dynamically allocate portions of memory to programs at their request, and free it for reuse when no longer needed

VIRTUAL MEMORY
virtual memory, or virtual storage[b] is a memory management technique that provides an "idealized abstraction of the storage resources that are actually available on a given machine"[3] which "creates the illusion to users of a very large (main) memory".

MANUAL MEMORY MANAGEMENT
manual memory management refers to the usage of manual instructions by the programmer to identify and deallocate unused objects, or garbage.

C DYNAMIC MEMORY ALLOCATION
C dynamic memory allocation refers to performing manual memory management for dynamic memory allocation in the C programming language via a group of functions in the C standard library, namely malloc, realloc, calloc and free

GARBAGE COLLECTION
garbage collection (GC) is a form of automatic memory management. 

GARBAGE
garbage includes data, objects, or other regions of the memory of a computer system (or other system resources), which will not be used in any future computation by the system, or by a program running on it. Because every computer system has a finite amount of memory, and most software produces garbage, it is frequently necessary to deallocate memory that is occupied by garbage and return it to the heap, or memory pool, for reuse.


ITERATION VS RECURSION
The concept of Recursion and Iteration is to execute a set of instructions repeatedly. The difference between them is that recursion is simply a method call in which the method being called is the same as the one making the call while iteration is when a loop is repeatedly executed until a certain condition is met.

BUFFER
A buffer is a chunck (array) of memory

BUFFER OVEFLOW

PROBLEMS OF USING scanf() TO TAKE USER INPUT, USE fgets() instead
- using %s to get a string from the user, which leads to the possibility that the string may be longer than your buffer, causing overflow.
- the possibility of a failed scan leaving your file pointer in an indeterminate location.

ENDIANNESS
endianness is the order or sequence of bytes of a word of digital data in computer memory. Endianness is primarily expressed as big-endian (BE) or little-endian (LE). A big-endian system stores the most significant byte of a word at the smallest memory address and the least significant byte at the largest. A little-endian system, in contrast, stores the least-significant byte at the smallest address.

OCTET
The octet is a unit of digital information in computing and telecommunications that consists of eight bits. The term is often used when the term byte might be ambiguous, as the byte has historically been used for storage units of a variety of sizes.

BYTE
The byte is a unit of digital information that most commonly consists of eight bits. Historically, the byte was the number of bits used to encode a single character of text in a computer

BIT
The bit is a basic unit of information in computing and digital communications. The name is a portmanteau of binary digit.[1] The bit represents a logical state with one of two possible values. These values are most commonly represented as either "1"or"0", but other representations such as true/false, yes/no, +/−, or on/off are common.

BIT ARRAY (BIT MAP, BIT STRING)
A bit array (also known as bit map, bit set, bit string, or bit vector) is an array data structure that compactly stores bits.

BMP FILE FORMAT
The BMP file format, also known as bitmap image file, device independent bitmap (DIB) file format and bitmap, is a raster graphics image file format used to store bitmap digital images, independently of the display device (such as a graphics adapter), especially on Microsoft Windows[2] and OS/2[3] operating systems.

BITMAP
a bitmap is a mapping from some domain (for example, a range of integers) to bits. It is also called a bit array or bitmap index.
